using NAudio.Wave;
using Serilog;
using YoutubeDLSharp;
using YoutubeDLSharp.Options;
using YoutubeExplode;
using YoutubeExplode.Playlists;
using YoutubeExplode.Common;
using YoutubeExplode.Videos;
using YoutubeSubScraper.Persistence;

namespace YoutubeSubScraper;

public static class Youtube
{
    public static async Task<Video?> GetVideo(VideoId videoId)
    {
        var youtubeClient = new YoutubeClient();
        return await youtubeClient.Videos.GetAsync(videoId);
    }

    public static async Task<List<string>> GetVideoUrlsFromPlaylistUrl(string playlistUrl)
    {
        var youtube = new YoutubeClient();
        try
        {
            var playlistId = PlaylistId.Parse(playlistUrl);
            var videos = await youtube.Playlists.GetVideosAsync(playlistId);

            return videos
                .Select(video => $"https://www.youtube.com/watch?v={video.Id}")
                .ToList();
        }
        catch (Exception ex)
        {
            Log.Logger.Error($"An error occurred in {nameof(GetVideoUrlsFromPlaylistUrl)} method: {ex.Message}");
        }
        return new List<string>();
    }
    
    public static async Task<List<BombaSubtitles>> GetCaptionsForVideo(string videoUrl)
    {
        try
        {
            var youtube = new YoutubeClient();
            var videoId = VideoId.Parse(videoUrl);
            var video = await youtube.Videos.GetAsync(videoId);

            var trackManifest = await youtube.Videos.ClosedCaptions.GetManifestAsync(videoId);
            var trackInfo = trackManifest.Tracks.FirstOrDefault(t => t.Language.Code == "pl" && !t.IsAutoGenerated);
            var tracksLanguages = string.Join(", ", trackManifest.Tracks.Select(x => x.Language)) ?? "";

            if (trackInfo != null)
            {
                var track = await youtube.Videos.ClosedCaptions.GetAsync(trackInfo);

                return track
                    .Captions
                    .Select(c => new BombaSubtitles(video.Title, videoUrl, videoId.ToString(), c.Text, c.Offset))
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Log.Logger.Error($"An error occurred in {nameof(GetCaptionsForVideo)} method: {ex.Message}");
        }
        return [];
    }
    
    public static void ConvertMp3ToWav(string mp3File, string wavFile)
    {
        using (var reader = new MediaFoundationReader(mp3File))
        using (var writer = new WaveFileWriter(wavFile, reader.WaveFormat))
        {
            reader.CopyTo(writer);
        }
    }
    
    public static async Task<string> SaveAudioToWavFile(string videoUrl)
    { 
        var ytDlpFilepath = Path.Combine(Directory.GetCurrentDirectory(), "yt-dlp.exe");
        var ffmpegFilepath = Path.Combine(Directory.GetCurrentDirectory(), "ffmpeg.exe");
        
        if(!File.Exists(ytDlpFilepath))
            await YoutubeDLSharp.Utils.DownloadYtDlp();
        if(!File.Exists(ffmpegFilepath))
            await YoutubeDLSharp.Utils.DownloadFFmpeg();
        
        var ytdl = new YoutubeDL();
        ytdl.YoutubeDLPath = ytDlpFilepath;
        ytdl.FFmpegPath = ffmpegFilepath;
        ytdl.OutputFolder = Path.Combine(Directory.GetCurrentDirectory(), "OutputAudioFiles");

        if (!Directory.Exists(ytdl.OutputFolder))
            Directory.CreateDirectory(ytdl.OutputFolder);

        var res = await ytdl.RunAudioDownload(
            videoUrl,
            AudioConversionFormat.Wav
        );

        string path = res.Data;
        return path;
    }
}